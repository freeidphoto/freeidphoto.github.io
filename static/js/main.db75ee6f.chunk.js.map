{"version":3,"sources":["Disclaimer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Disclaimer","className","US_PASSPORT","name","height","width","App","React","useState","cropper","setCropper","imgURL","setImgURL","resultImgURL","setResultImgURL","composedResultImgURL","setComposedResultImgURL","currentID","progressPercent","setProgressPercent","MODEL_INPUT_WIDTH","MODEL_INPUT_HEIGHT","inProgress","inferenceResultToImageData","r","ctx","document","createElement","getContext","pred","Object","values","imgData","createImageData","console","log","data","i","length","pixelIndex","t","p","Math","round","Promise","resolve","reject","imageDataToCanvas","canvas","ctx2","putImageData","applyBackgroundMask","imgAndMask","img","mask","Container","ProgressBar","animated","hidden","now","href","target","rel","Form","Group","controlId","Label","Control","type","onChange","e","preventDefault","files","match","reader","FileReader","onload","result","readAsDataURL","Button","variant","onClick","event","getCroppedCanvas","maxHeight","minHeight","maxWidth","minWidth","alpha","imageData","getImageData","to","pica","Pica","origImgData","floatArr","Float32Array","floatArr2","j","k","l","m","feeds","Tensor","imageDataToFeeds","then","InferenceSession","create","sess","inputNames","run","finally","from","resize","filterData","c","toDataURL","alert","disabled","destroy","undefined","getElementById","value","alt","src","onLoad","thisImg","currentTarget","Cropper","aspectRatio","viewMode","minCropBoxWidth","minCropBoxHeight","ready","_","id_type","b1","getElementsByClassName","setAttribute","b2","after","adjustGuide","download","h","naturalHeight","w","naturalWidth","context","fillStyle","fillRect","drawImage","beginPath","moveTo","lineTo","stroke","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.db75ee6f.chunk.js","sourcesContent":["function Disclaimer() {\n    return (\n        <>\n            <h2 className=\"text-center\">DISCLAIMER</h2>\n            <h6 className=\"text-center\"> Last updated: August 27, 2022 </h6>\n            <h3 className=\"text-center\">WEBSITE DISCLAIMER </h3>\n            <p>\n                The information provided by freeidphoto.com (\"we,\" \"us,\" or \"our\") on freeidphoto.com (the \"Site\") is\n                for general informational purposes only. All information on the Site is provided in good faith, however\n                we make no representation or warranty of any kind, express or implied, regarding the accuracy, adequacy,\n                validity, reliability, availability, or completeness of any information on the Site. UNDER NO\n                CIRCUMSTANCE SHALL WE HAVE ANY LIABILITY TO YOU FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT\n                OF THE USE OF THE SITE OR RELIANCE ON ANY INFORMATION PROVIDED ON THE SITE. YOUR USE OF THE SITE AND\n                YOUR RELIANCE ON ANY INFORMATION ON THE SITE IS SOLELY AT YOUR OWN RISK.\n            </p>\n\n            <p>\n                The Site may contain (or you may be sent through the Site) links to other websites or content belonging\n                to or originating from third parties or links to websites and features in banners or other advertising.\n                Such external links are not investigated, monitored, or checked for accuracy, adequacy, validity,\n                reliability, availability, or completeness by us. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME\n                RESPONSIBILITY FOR THE ACCURACY OR RELIABILITY OF ANY INFORMATION OFFERED BY THIRD-PARTY WEBSITES LINKED\n                THROUGH THE SITE OR ANY WEBSITE OR FEATURE LINKED IN ANY BANNER OR OTHER ADVERTISING. WE WILL NOT BE A\n                PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND THIRD-PARTY\n                PROVIDERS OF PRODUCTS OR SERVICES.\n            </p>\n\n            <h3 className=\"text-center\">TESTIMONIALS DISCLAIMER</h3>\n\n            <p>\n                The Site may contain testimonials by users of our products and/or services. These testimonials reflect\n                the real-life experiences and opinions of such users. However, the experiences are personal to those\n                particular users, and may not necessarily be representative of all users of our products and/or\n                services. We do not claim, and you should not assume, that all users will have the same experiences.\n                YOUR INDIVIDUAL RESULTS MAY VARY.\n            </p>\n            <p>\n                The testimonials on the Site are submitted in various forms such as text, audio and/or video, and are\n                reviewed by us before being posted. They appear on the Site verbatim as given by the users, except for\n                the correction of grammar or typing errors. Some testimonials may have been shortened for the sake of\n                brevity where the full testimonial contained extraneous information not relevant to the general public.\n            </p>\n\n            <p>\n                The views and opinions contained in the testimonials belong solely to the individual user and do not\n                reflect our views and opinions. We are not affiliated with users who provide testimonials, and users are\n                not paid or otherwise compensated for their testimonials.\n            </p>\n        </>\n    );\n}\nexport default Disclaimer;\n","import React, { SyntheticEvent, useEffect } from \"react\";\nimport \"./App.css\";\nimport Cropper from \"cropperjs\";\nimport \"cropperjs/dist/cropper.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Disclaimer from \"./Disclaimer\";\nimport { InferenceSession, Tensor } from \"onnxruntime-web\";\nimport Pica from \"pica\";\n\ntype ID = {\n    name: string;\n    height: number;\n    width: number;\n};\n\nconst US_PASSPORT: ID = {\n    name: \"us-passport\",\n    height: 600,\n    width: 600,\n};\n\nfunction adjustGuide(id_type: string) {\n    let b1 = document.getElementsByClassName(\"dashed-h\")[0];\n    b1.setAttribute(\"class\", \"cropper-dashed dashed-\" + id_type + \"-h1\");\n    let b2 = document.createElement(\"span\");\n    b2.setAttribute(\"class\", \"cropper-dashed dashed-\" + id_type + \"-h2\");\n    b1.after(b2);\n}\n\nfunction App() {\n    const [cropper, setCropper] = React.useState<Cropper>();\n    const [imgURL, setImgURL] = React.useState<string>();\n    const [resultImgURL, setResultImgURL] = React.useState<string>();\n    const [composedResultImgURL, setComposedResultImgURL] = React.useState<string>();\n\n    // eslint-disable-next-line\n    const [currentID, setCurrentID] = React.useState<ID>(US_PASSPORT);\n    const [progressPercent, setProgressPercent] = React.useState<number>(0);\n\n    const MODEL_INPUT_WIDTH = 320 as number;\n    const MODEL_INPUT_HEIGHT = 320 as number;\n\n    function reset() {\n        cropper?.destroy();\n        setCropper(undefined);\n        setImgURL(\"\");\n        setResultImgURL(\"\");\n        setComposedResultImgURL(\"\");\n        setProgressPercent(0);\n        (document.getElementById(\"formFile\") as HTMLInputElement).value = \"\";\n    }\n    function inProgress() {\n        return progressPercent > 0 && progressPercent < 100;\n    }\n\n    const populateCropper = (e: SyntheticEvent<HTMLImageElement>) => {\n        const thisImg = e.currentTarget;\n        let cropper = new Cropper(thisImg, {\n            aspectRatio: 1,\n            viewMode: 1,\n            minCropBoxWidth: 60,\n            minCropBoxHeight: 60,\n            ready: (_) => {\n                adjustGuide(US_PASSPORT.name);\n            },\n        });\n        setCropper(cropper);\n    };\n\n    const composeResultImg = (e: SyntheticEvent<HTMLImageElement>) => {\n        const img = e.currentTarget;\n        const canvas = document.createElement(\"canvas\");\n        const h = img.naturalHeight;\n        const w = img.naturalWidth;\n        canvas.height = 2 * h;\n        canvas.width = 3 * w;\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n            context.fillStyle = \"white\";\n            context.fillRect(0, 0, canvas.width, canvas.height);\n            for (let i = 0; i < 2; i++) {\n                for (let j = 0; j < 2; j++) {\n                    context.drawImage(img, (0.5 + i) * w, j * h);\n                }\n            }\n            context.beginPath();\n            // draw horizontal lines\n            context.moveTo(0.5 * w, h);\n            context.lineTo(2.5 * w, h);\n            // draw vertical lines\n            for (let i = 0; i < 3; i++) {\n                context.moveTo((i + 0.5) * w, 0);\n                context.lineTo((i + 0.5) * w, 2 * h);\n            }\n            context.stroke();\n            setComposedResultImgURL(canvas.toDataURL(\"image/jpeg\"));\n        }\n    };\n\n    const imageDataToFeeds = (img: ImageData): Promise<InferenceSession.OnnxValueMapType> => {\n        var floatArr = new Float32Array(MODEL_INPUT_WIDTH * MODEL_INPUT_HEIGHT * 3);\n        var floatArr2 = new Float32Array(MODEL_INPUT_WIDTH * MODEL_INPUT_HEIGHT * 3);\n        var j = 0;\n        console.log(img.data.length);\n        for (let i = 0; i < img.data.length; i++) {\n            if (i % 4 !== 0) {\n                floatArr[j] = (img.data[i] as number) / 255; // red   color\n                j = j + 1;\n            }\n        }\n        var k = 0;\n        for (let i = 0; i < floatArr.length; i += 3) {\n            floatArr2[k] = floatArr[i]; // red   color\n            k = k + 1;\n        }\n        console.log(\"k\", k);\n        var l = 102400;\n        for (let i = 1; i < floatArr.length; i += 3) {\n            floatArr2[l] = floatArr[i]; // red   color\n            l = l + 1;\n        }\n        console.log(\"l\", l);\n        var m = 204800;\n        for (let i = 2; i < floatArr.length; i += 3) {\n            floatArr2[m] = floatArr[i]; // red   color\n            m = m + 1;\n        }\n        const feeds = { \"input.1\": new Tensor(\"float32\", floatArr2, [1, 3, MODEL_INPUT_WIDTH, MODEL_INPUT_HEIGHT]) };\n        console.log(feeds);\n        return Promise.resolve(feeds);\n    };\n\n    const inferenceResultToImageData = (r: InferenceSession.ReturnType): Promise<ImageData> => {\n        const canvas = document.createElement(\"canvas\") as HTMLCanvasElement;\n        const ctx = canvas.getContext(\"2d\");\n        if (ctx) {\n            const pred = Object.values(r)[0];\n            var imgData = ctx.createImageData(MODEL_INPUT_WIDTH, MODEL_INPUT_HEIGHT);\n            console.log(pred.data[0]);\n            for (let i = 0; i < pred.data.length * 4; i += 4) {\n                var pixelIndex = i;\n                var t = i / 4;\n                var p = pred.data[t] as number;\n                imgData.data[pixelIndex] = Math.round(p * 255);\n                imgData.data[pixelIndex + 3] = 0xff;\n            }\n            return Promise.resolve(imgData);\n        }\n        return Promise.reject(\"Failed to get context\");\n    };\n\n    const imageDataToCanvas = (imgData: ImageData): Promise<HTMLCanvasElement> => {\n        const canvas = document.createElement(\"canvas\") as HTMLCanvasElement;\n        canvas.width = imgData.width;\n        canvas.height = imgData.height;\n        const ctx2 = canvas.getContext(\"2d\");\n        ctx2?.putImageData(imgData, 0, 0);\n        return Promise.resolve(canvas);\n    };\n\n    const applyBackgroundMask = (imgAndMask: ImageData[]): Promise<ImageData> => {\n        let img = imgAndMask[0];\n        const mask = imgAndMask[1];\n        for (let i = 0; i < mask.data.length; i += 4) {\n            let v = 0;\n            v = mask.data[i];\n            if (v < 250) {\n                img.data[i] = 0xff;\n                img.data[i + 1] = 0xff;\n                img.data[i + 2] = 0xff;\n            }\n            img.data[i + 3] = mask.data[i + 3];\n        }\n        return Promise.resolve(img);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (cropper == null) {\n            alert(\"select and crop a photo before uploading.\");\n            return;\n        }\n\n        const ctx = cropper\n            .getCroppedCanvas({\n                maxHeight: MODEL_INPUT_HEIGHT,\n                minHeight: MODEL_INPUT_HEIGHT,\n                maxWidth: MODEL_INPUT_WIDTH,\n                minWidth: MODEL_INPUT_WIDTH,\n            })\n            .getContext(\"2d\", { alpha: true });\n\n        if (ctx) {\n            var imageData = ctx.getImageData(0, 0, MODEL_INPUT_WIDTH, MODEL_INPUT_HEIGHT);\n            const to = document.createElement(\"canvas\") as HTMLCanvasElement;\n            to.width = currentID.width;\n            to.height = currentID.height;\n            const pica = Pica();\n            let origImgData = cropper\n                .getCroppedCanvas({\n                    maxWidth: currentID.width,\n                    minWidth: currentID.width,\n                    maxHeight: currentID.height,\n                    minHeight: currentID.height,\n                })\n                .getContext(\"2d\")\n                ?.getImageData(0, 0, currentID.width, currentID.height) as ImageData;\n\n            imageDataToFeeds(imageData)\n                .then((feeds: InferenceSession.OnnxValueMapType) => {\n                    InferenceSession.create(\"https://drive.google.com/uc?id=1ZfqwVxu-1XWC1xU1GHIP-FM_Knd_AX5j\", {})\n                        .then((sess: InferenceSession) => {\n                            console.log(\"session loaded\", sess);\n                            console.log(\"session loaded\", sess.inputNames);\n                            sess.run(feeds)\n                                .finally(() => {\n                                    setProgressPercent(75);\n                                })\n                                .then(inferenceResultToImageData)\n                                .then(imageDataToCanvas)\n                                .finally(() => {\n                                    setProgressPercent(80);\n                                })\n                                .then((from: HTMLCanvasElement) => {\n                                    pica.resize(from, to)\n                                        .then((result: HTMLCanvasElement) => {\n                                            const ctx = result.getContext(\"2d\");\n                                            if (ctx) {\n                                                let filterData = ctx.getImageData(\n                                                    0,\n                                                    0,\n                                                    currentID.width,\n                                                    currentID.height\n                                                );\n                                                return Promise.resolve([origImgData, filterData]);\n                                            }\n                                            return Promise.reject(\"error generate filter and original image data\");\n                                        })\n                                        .then(applyBackgroundMask)\n                                        .finally(() => {\n                                            setProgressPercent(90);\n                                        })\n                                        .then(imageDataToCanvas)\n                                        .then((c: HTMLCanvasElement) => {\n                                            setResultImgURL(c.toDataURL(\"image/jpeg\"));\n                                        })\n                                        .finally(() => {\n                                            setProgressPercent(100);\n                                        });\n                                });\n                        })\n                        .finally(() => {\n                            setProgressPercent(50);\n                        });\n                })\n                .finally(() => {\n                    setProgressPercent(50);\n                });\n        }\n    };\n\n    return (\n        <>\n            <Container className=\"p-3\">\n                <Container className=\"p-5 mb-4 bg-light rounded-3\">\n                    <h1 className=\"header text-center\"> Welcome To freeidphoto.com </h1>\n                </Container>\n                <Container className=\"row mb-4\">\n                    <Container className=\"col\">\n                        <ProgressBar animated hidden={progressPercent === 0} now={progressPercent} />\n                    </Container>\n                </Container>\n                <Container className=\"row\">\n                    <Container className=\"col-lg-4\">\n                        <Container>\n                            <h3>Instruction</h3>\n                            <ol>\n                                <li>\n                                    <b>Only US passport photo is supported (for now). </b>\n                                </li>\n                                <li>\n                                    See&nbsp;\n                                    <a\n                                        href=\"https://travel.state.gov/content/travel/en/passports/how-apply/photos.html\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                    >\n                                        here\n                                    </a>\n                                    &nbsp;first to know the requirements.\n                                </li>\n                                <li>\n                                    Background does not need to be 100% white but avoid photos with busy background for\n                                    better results.\n                                </li>\n                                <li>\n                                    Simply position the two green bars to cover the top of head and the bottom of chin.\n                                </li>\n                            </ol>\n                        </Container>\n                        <Container>\n                            <Form.Group controlId=\"formFile\" className=\"mb-3\">\n                                <Form.Label>Select your photo:</Form.Label>\n                                <Form.Control\n                                    type=\"file\"\n                                    onChange={(e: React.FormEvent) => {\n                                        e.preventDefault();\n                                        const files = (e.target as HTMLInputElement).files;\n                                        if (files && files.length > 0 && files[0].type.match(/^image\\//)) {\n                                            let reader = new FileReader();\n                                            reader.onload = (e) => {\n                                                setImgURL(e.target?.result as string);\n                                            };\n                                            reader.readAsDataURL(files[0]);\n                                        }\n                                    }}\n                                />\n                            </Form.Group>\n                            <Button variant=\"primary\" onClick={handleSubmit} disabled={inProgress() || !imgURL}>\n                                Submit\n                            </Button>\n                            <Button variant=\"danger\" className=\"float-end\" onClick={reset} disabled={inProgress()}>\n                                Reset\n                            </Button>\n                        </Container>\n                    </Container>\n                    <Container className=\"col-lg-8 text-center mt-3\">\n                        <Container hidden={progressPercent === 100 || !imgURL}>\n                            <img alt=\"\" src={imgURL} onLoad={populateCropper}></img>\n                        </Container>\n                        <Container hidden={!resultImgURL || inProgress()}>\n                            <h2>Click the image to download.</h2>\n                            <a href={composedResultImgURL} download=\"composed_result.jpeg\">\n                                <img alt=\"\" src={composedResultImgURL}></img>\n                            </a>\n                            <a href={resultImgURL} download=\"result.jpeg\">\n                                <img width={200} alt=\"\" src={resultImgURL} onLoad={composeResultImg}></img>\n                            </a>\n                        </Container>\n                    </Container>\n                </Container>\n\n                <Container className=\"mt-3\">\n                    <h3 className=\"text-center\">Why do I make this website?</h3>\n                    <p>\n                        There are so many other ID photo websites that claim to be free. However, some only produces\n                        greyscale photos. Some does not remove background. Some prints their watermarks to make result\n                        photos unusable. They eventually want you to pay in order to get what you want: a white\n                        background photo that is ready to print on a 6\" * 4\" photo paper. This website is FREE to use\n                        and will always be.\n                    </p>\n                    <p>\n                        Printing yourself at CVS, Walgreens or other stroes is less than $1 for 4 photos while photo\n                        stores charge more than $10 for only 2 photos.\n                    </p>\n                    <p>\n                        This is just a hobby project. <b>Only US passport photo is supported (for now).</b>Your\n                        feedback, suggestions, and kudos are welcomed and appreciated. Please email me at\n                        <a href=\"mailto:freeidphoto@gmail.com\"> freeidphoto@gmail.com</a>.\n                    </p>\n                </Container>\n                <Container className=\"row mt-5\">\n                    <Disclaimer />\n                </Container>\n            </Container>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement);\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}